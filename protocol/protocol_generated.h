// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

struct PacketHeader;

struct PacketPayload;

struct Vec2;

struct DrawBatch;

struct ServerHelloPayload;

struct FullImagePayload;

struct StartDrawPayload;

struct EndDrawPayload;

struct DrawPointsPayload;

struct DeleteBatchPayload;

struct UserEnterPayload;

struct UserLeavePayload;

enum PacketType {
  PacketType_ServerHello = 0,
  PacketType_FullImage = 1,
  PacketType_StartDraw = 2,
  PacketType_EndDraw = 3,
  PacketType_DrawPoints = 4,
  PacketType_DeleteBatch = 5,
  PacketType_UserEnter = 6,
  PacketType_UserLeave = 7,
  PacketType_MIN = PacketType_ServerHello,
  PacketType_MAX = PacketType_UserLeave
};

inline const PacketType (&EnumValuesPacketType())[8] {
  static const PacketType values[] = {
    PacketType_ServerHello,
    PacketType_FullImage,
    PacketType_StartDraw,
    PacketType_EndDraw,
    PacketType_DrawPoints,
    PacketType_DeleteBatch,
    PacketType_UserEnter,
    PacketType_UserLeave
  };
  return values;
}

inline const char * const *EnumNamesPacketType() {
  static const char * const names[] = {
    "ServerHello",
    "FullImage",
    "StartDraw",
    "EndDraw",
    "DrawPoints",
    "DeleteBatch",
    "UserEnter",
    "UserLeave",
    nullptr
  };
  return names;
}

inline const char *EnumNamePacketType(PacketType e) {
  if (e < PacketType_ServerHello || e > PacketType_UserLeave) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPacketType()[index];
}

enum Payload {
  Payload_NONE = 0,
  Payload_ServerHelloPayload = 1,
  Payload_FullImagePayload = 2,
  Payload_StartDrawPayload = 3,
  Payload_EndDrawPayload = 4,
  Payload_DrawPointsPayload = 5,
  Payload_DeleteBatchPayload = 6,
  Payload_UserEnterPayload = 7,
  Payload_UserLeavePayload = 8,
  Payload_MIN = Payload_NONE,
  Payload_MAX = Payload_UserLeavePayload
};

inline const Payload (&EnumValuesPayload())[9] {
  static const Payload values[] = {
    Payload_NONE,
    Payload_ServerHelloPayload,
    Payload_FullImagePayload,
    Payload_StartDrawPayload,
    Payload_EndDrawPayload,
    Payload_DrawPointsPayload,
    Payload_DeleteBatchPayload,
    Payload_UserEnterPayload,
    Payload_UserLeavePayload
  };
  return values;
}

inline const char * const *EnumNamesPayload() {
  static const char * const names[] = {
    "NONE",
    "ServerHelloPayload",
    "FullImagePayload",
    "StartDrawPayload",
    "EndDrawPayload",
    "DrawPointsPayload",
    "DeleteBatchPayload",
    "UserEnterPayload",
    "UserLeavePayload",
    nullptr
  };
  return names;
}

inline const char *EnumNamePayload(Payload e) {
  if (e < Payload_NONE || e > Payload_UserLeavePayload) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPayload()[index];
}

template<typename T> struct PayloadTraits {
  static const Payload enum_value = Payload_NONE;
};

template<> struct PayloadTraits<ServerHelloPayload> {
  static const Payload enum_value = Payload_ServerHelloPayload;
};

template<> struct PayloadTraits<FullImagePayload> {
  static const Payload enum_value = Payload_FullImagePayload;
};

template<> struct PayloadTraits<StartDrawPayload> {
  static const Payload enum_value = Payload_StartDrawPayload;
};

template<> struct PayloadTraits<EndDrawPayload> {
  static const Payload enum_value = Payload_EndDrawPayload;
};

template<> struct PayloadTraits<DrawPointsPayload> {
  static const Payload enum_value = Payload_DrawPointsPayload;
};

template<> struct PayloadTraits<DeleteBatchPayload> {
  static const Payload enum_value = Payload_DeleteBatchPayload;
};

template<> struct PayloadTraits<UserEnterPayload> {
  static const Payload enum_value = Payload_UserEnterPayload;
};

template<> struct PayloadTraits<UserLeavePayload> {
  static const Payload enum_value = Payload_UserLeavePayload;
};

bool VerifyPayload(flatbuffers::Verifier &verifier, const void *obj, Payload type);
bool VerifyPayloadVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(2) PacketHeader FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t packet_type_;
  uint16_t payload_length_;

 public:
  PacketHeader() {
    memset(static_cast<void *>(this), 0, sizeof(PacketHeader));
  }
  PacketHeader(PacketType _packet_type, uint16_t _payload_length)
      : packet_type_(flatbuffers::EndianScalar(static_cast<uint16_t>(_packet_type))),
        payload_length_(flatbuffers::EndianScalar(_payload_length)) {
  }
  PacketType packet_type() const {
    return static_cast<PacketType>(flatbuffers::EndianScalar(packet_type_));
  }
  uint16_t payload_length() const {
    return flatbuffers::EndianScalar(payload_length_);
  }
};
FLATBUFFERS_STRUCT_END(PacketHeader, 4);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(2) Vec2 FLATBUFFERS_FINAL_CLASS {
 private:
  int16_t x_;
  int16_t y_;

 public:
  Vec2() {
    memset(static_cast<void *>(this), 0, sizeof(Vec2));
  }
  Vec2(int16_t _x, int16_t _y)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)) {
  }
  int16_t x() const {
    return flatbuffers::EndianScalar(x_);
  }
  int16_t y() const {
    return flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(Vec2, 4);

struct PacketPayload FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PAYLOAD_TYPE = 4,
    VT_PAYLOAD = 6
  };
  Payload payload_type() const {
    return static_cast<Payload>(GetField<uint8_t>(VT_PAYLOAD_TYPE, 0));
  }
  const void *payload() const {
    return GetPointer<const void *>(VT_PAYLOAD);
  }
  template<typename T> const T *payload_as() const;
  const ServerHelloPayload *payload_as_ServerHelloPayload() const {
    return payload_type() == Payload_ServerHelloPayload ? static_cast<const ServerHelloPayload *>(payload()) : nullptr;
  }
  const FullImagePayload *payload_as_FullImagePayload() const {
    return payload_type() == Payload_FullImagePayload ? static_cast<const FullImagePayload *>(payload()) : nullptr;
  }
  const StartDrawPayload *payload_as_StartDrawPayload() const {
    return payload_type() == Payload_StartDrawPayload ? static_cast<const StartDrawPayload *>(payload()) : nullptr;
  }
  const EndDrawPayload *payload_as_EndDrawPayload() const {
    return payload_type() == Payload_EndDrawPayload ? static_cast<const EndDrawPayload *>(payload()) : nullptr;
  }
  const DrawPointsPayload *payload_as_DrawPointsPayload() const {
    return payload_type() == Payload_DrawPointsPayload ? static_cast<const DrawPointsPayload *>(payload()) : nullptr;
  }
  const DeleteBatchPayload *payload_as_DeleteBatchPayload() const {
    return payload_type() == Payload_DeleteBatchPayload ? static_cast<const DeleteBatchPayload *>(payload()) : nullptr;
  }
  const UserEnterPayload *payload_as_UserEnterPayload() const {
    return payload_type() == Payload_UserEnterPayload ? static_cast<const UserEnterPayload *>(payload()) : nullptr;
  }
  const UserLeavePayload *payload_as_UserLeavePayload() const {
    return payload_type() == Payload_UserLeavePayload ? static_cast<const UserLeavePayload *>(payload()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PAYLOAD_TYPE) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           VerifyPayload(verifier, payload(), payload_type()) &&
           verifier.EndTable();
  }
};

template<> inline const ServerHelloPayload *PacketPayload::payload_as<ServerHelloPayload>() const {
  return payload_as_ServerHelloPayload();
}

template<> inline const FullImagePayload *PacketPayload::payload_as<FullImagePayload>() const {
  return payload_as_FullImagePayload();
}

template<> inline const StartDrawPayload *PacketPayload::payload_as<StartDrawPayload>() const {
  return payload_as_StartDrawPayload();
}

template<> inline const EndDrawPayload *PacketPayload::payload_as<EndDrawPayload>() const {
  return payload_as_EndDrawPayload();
}

template<> inline const DrawPointsPayload *PacketPayload::payload_as<DrawPointsPayload>() const {
  return payload_as_DrawPointsPayload();
}

template<> inline const DeleteBatchPayload *PacketPayload::payload_as<DeleteBatchPayload>() const {
  return payload_as_DeleteBatchPayload();
}

template<> inline const UserEnterPayload *PacketPayload::payload_as<UserEnterPayload>() const {
  return payload_as_UserEnterPayload();
}

template<> inline const UserLeavePayload *PacketPayload::payload_as<UserLeavePayload>() const {
  return payload_as_UserLeavePayload();
}

struct PacketPayloadBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_payload_type(Payload payload_type) {
    fbb_.AddElement<uint8_t>(PacketPayload::VT_PAYLOAD_TYPE, static_cast<uint8_t>(payload_type), 0);
  }
  void add_payload(flatbuffers::Offset<void> payload) {
    fbb_.AddOffset(PacketPayload::VT_PAYLOAD, payload);
  }
  explicit PacketPayloadBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PacketPayloadBuilder &operator=(const PacketPayloadBuilder &);
  flatbuffers::Offset<PacketPayload> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PacketPayload>(end);
    return o;
  }
};

inline flatbuffers::Offset<PacketPayload> CreatePacketPayload(
    flatbuffers::FlatBufferBuilder &_fbb,
    Payload payload_type = Payload_NONE,
    flatbuffers::Offset<void> payload = 0) {
  PacketPayloadBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_payload_type(payload_type);
  return builder_.Finish();
}

struct DrawBatch FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_SEQUENCE_ID = 6,
    VT_COLOR = 8,
    VT_POINTS = 10
  };
  uint32_t uid() const {
    return GetField<uint32_t>(VT_UID, 0);
  }
  uint32_t sequence_id() const {
    return GetField<uint32_t>(VT_SEQUENCE_ID, 0);
  }
  uint32_t color() const {
    return GetField<uint32_t>(VT_COLOR, 0);
  }
  const flatbuffers::Vector<const Vec2 *> *points() const {
    return GetPointer<const flatbuffers::Vector<const Vec2 *> *>(VT_POINTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_UID) &&
           VerifyField<uint32_t>(verifier, VT_SEQUENCE_ID) &&
           VerifyField<uint32_t>(verifier, VT_COLOR) &&
           VerifyOffset(verifier, VT_POINTS) &&
           verifier.VerifyVector(points()) &&
           verifier.EndTable();
  }
};

struct DrawBatchBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint32_t uid) {
    fbb_.AddElement<uint32_t>(DrawBatch::VT_UID, uid, 0);
  }
  void add_sequence_id(uint32_t sequence_id) {
    fbb_.AddElement<uint32_t>(DrawBatch::VT_SEQUENCE_ID, sequence_id, 0);
  }
  void add_color(uint32_t color) {
    fbb_.AddElement<uint32_t>(DrawBatch::VT_COLOR, color, 0);
  }
  void add_points(flatbuffers::Offset<flatbuffers::Vector<const Vec2 *>> points) {
    fbb_.AddOffset(DrawBatch::VT_POINTS, points);
  }
  explicit DrawBatchBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DrawBatchBuilder &operator=(const DrawBatchBuilder &);
  flatbuffers::Offset<DrawBatch> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DrawBatch>(end);
    return o;
  }
};

inline flatbuffers::Offset<DrawBatch> CreateDrawBatch(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uid = 0,
    uint32_t sequence_id = 0,
    uint32_t color = 0,
    flatbuffers::Offset<flatbuffers::Vector<const Vec2 *>> points = 0) {
  DrawBatchBuilder builder_(_fbb);
  builder_.add_points(points);
  builder_.add_color(color);
  builder_.add_sequence_id(sequence_id);
  builder_.add_uid(uid);
  return builder_.Finish();
}

inline flatbuffers::Offset<DrawBatch> CreateDrawBatchDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uid = 0,
    uint32_t sequence_id = 0,
    uint32_t color = 0,
    const std::vector<Vec2> *points = nullptr) {
  auto points__ = points ? _fbb.CreateVectorOfStructs<Vec2>(*points) : 0;
  return CreateDrawBatch(
      _fbb,
      uid,
      sequence_id,
      color,
      points__);
}

struct ServerHelloPayload FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_COLOR = 6
  };
  uint32_t uid() const {
    return GetField<uint32_t>(VT_UID, 0);
  }
  uint32_t color() const {
    return GetField<uint32_t>(VT_COLOR, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_UID) &&
           VerifyField<uint32_t>(verifier, VT_COLOR) &&
           verifier.EndTable();
  }
};

struct ServerHelloPayloadBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint32_t uid) {
    fbb_.AddElement<uint32_t>(ServerHelloPayload::VT_UID, uid, 0);
  }
  void add_color(uint32_t color) {
    fbb_.AddElement<uint32_t>(ServerHelloPayload::VT_COLOR, color, 0);
  }
  explicit ServerHelloPayloadBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ServerHelloPayloadBuilder &operator=(const ServerHelloPayloadBuilder &);
  flatbuffers::Offset<ServerHelloPayload> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ServerHelloPayload>(end);
    return o;
  }
};

inline flatbuffers::Offset<ServerHelloPayload> CreateServerHelloPayload(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uid = 0,
    uint32_t color = 0) {
  ServerHelloPayloadBuilder builder_(_fbb);
  builder_.add_color(color);
  builder_.add_uid(uid);
  return builder_.Finish();
}

struct FullImagePayload FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BATCHES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<DrawBatch>> *batches() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<DrawBatch>> *>(VT_BATCHES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BATCHES) &&
           verifier.VerifyVector(batches()) &&
           verifier.VerifyVectorOfTables(batches()) &&
           verifier.EndTable();
  }
};

struct FullImagePayloadBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_batches(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DrawBatch>>> batches) {
    fbb_.AddOffset(FullImagePayload::VT_BATCHES, batches);
  }
  explicit FullImagePayloadBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FullImagePayloadBuilder &operator=(const FullImagePayloadBuilder &);
  flatbuffers::Offset<FullImagePayload> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FullImagePayload>(end);
    return o;
  }
};

inline flatbuffers::Offset<FullImagePayload> CreateFullImagePayload(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DrawBatch>>> batches = 0) {
  FullImagePayloadBuilder builder_(_fbb);
  builder_.add_batches(batches);
  return builder_.Finish();
}

inline flatbuffers::Offset<FullImagePayload> CreateFullImagePayloadDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<DrawBatch>> *batches = nullptr) {
  auto batches__ = batches ? _fbb.CreateVector<flatbuffers::Offset<DrawBatch>>(*batches) : 0;
  return CreateFullImagePayload(
      _fbb,
      batches__);
}

struct StartDrawPayload FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_SEQUENCE_ID = 6,
    VT_COLOR = 8
  };
  uint32_t uid() const {
    return GetField<uint32_t>(VT_UID, 0);
  }
  uint32_t sequence_id() const {
    return GetField<uint32_t>(VT_SEQUENCE_ID, 0);
  }
  uint32_t color() const {
    return GetField<uint32_t>(VT_COLOR, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_UID) &&
           VerifyField<uint32_t>(verifier, VT_SEQUENCE_ID) &&
           VerifyField<uint32_t>(verifier, VT_COLOR) &&
           verifier.EndTable();
  }
};

struct StartDrawPayloadBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint32_t uid) {
    fbb_.AddElement<uint32_t>(StartDrawPayload::VT_UID, uid, 0);
  }
  void add_sequence_id(uint32_t sequence_id) {
    fbb_.AddElement<uint32_t>(StartDrawPayload::VT_SEQUENCE_ID, sequence_id, 0);
  }
  void add_color(uint32_t color) {
    fbb_.AddElement<uint32_t>(StartDrawPayload::VT_COLOR, color, 0);
  }
  explicit StartDrawPayloadBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  StartDrawPayloadBuilder &operator=(const StartDrawPayloadBuilder &);
  flatbuffers::Offset<StartDrawPayload> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<StartDrawPayload>(end);
    return o;
  }
};

inline flatbuffers::Offset<StartDrawPayload> CreateStartDrawPayload(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uid = 0,
    uint32_t sequence_id = 0,
    uint32_t color = 0) {
  StartDrawPayloadBuilder builder_(_fbb);
  builder_.add_color(color);
  builder_.add_sequence_id(sequence_id);
  builder_.add_uid(uid);
  return builder_.Finish();
}

struct EndDrawPayload FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_SEQUENCE_ID = 6
  };
  uint32_t uid() const {
    return GetField<uint32_t>(VT_UID, 0);
  }
  uint32_t sequence_id() const {
    return GetField<uint32_t>(VT_SEQUENCE_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_UID) &&
           VerifyField<uint32_t>(verifier, VT_SEQUENCE_ID) &&
           verifier.EndTable();
  }
};

struct EndDrawPayloadBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint32_t uid) {
    fbb_.AddElement<uint32_t>(EndDrawPayload::VT_UID, uid, 0);
  }
  void add_sequence_id(uint32_t sequence_id) {
    fbb_.AddElement<uint32_t>(EndDrawPayload::VT_SEQUENCE_ID, sequence_id, 0);
  }
  explicit EndDrawPayloadBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EndDrawPayloadBuilder &operator=(const EndDrawPayloadBuilder &);
  flatbuffers::Offset<EndDrawPayload> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EndDrawPayload>(end);
    return o;
  }
};

inline flatbuffers::Offset<EndDrawPayload> CreateEndDrawPayload(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uid = 0,
    uint32_t sequence_id = 0) {
  EndDrawPayloadBuilder builder_(_fbb);
  builder_.add_sequence_id(sequence_id);
  builder_.add_uid(uid);
  return builder_.Finish();
}

struct DrawPointsPayload FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_SEQUENCE_ID = 6,
    VT_POINTS = 8
  };
  uint32_t uid() const {
    return GetField<uint32_t>(VT_UID, 0);
  }
  uint32_t sequence_id() const {
    return GetField<uint32_t>(VT_SEQUENCE_ID, 0);
  }
  const flatbuffers::Vector<const Vec2 *> *points() const {
    return GetPointer<const flatbuffers::Vector<const Vec2 *> *>(VT_POINTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_UID) &&
           VerifyField<uint32_t>(verifier, VT_SEQUENCE_ID) &&
           VerifyOffset(verifier, VT_POINTS) &&
           verifier.VerifyVector(points()) &&
           verifier.EndTable();
  }
};

struct DrawPointsPayloadBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint32_t uid) {
    fbb_.AddElement<uint32_t>(DrawPointsPayload::VT_UID, uid, 0);
  }
  void add_sequence_id(uint32_t sequence_id) {
    fbb_.AddElement<uint32_t>(DrawPointsPayload::VT_SEQUENCE_ID, sequence_id, 0);
  }
  void add_points(flatbuffers::Offset<flatbuffers::Vector<const Vec2 *>> points) {
    fbb_.AddOffset(DrawPointsPayload::VT_POINTS, points);
  }
  explicit DrawPointsPayloadBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DrawPointsPayloadBuilder &operator=(const DrawPointsPayloadBuilder &);
  flatbuffers::Offset<DrawPointsPayload> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DrawPointsPayload>(end);
    return o;
  }
};

inline flatbuffers::Offset<DrawPointsPayload> CreateDrawPointsPayload(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uid = 0,
    uint32_t sequence_id = 0,
    flatbuffers::Offset<flatbuffers::Vector<const Vec2 *>> points = 0) {
  DrawPointsPayloadBuilder builder_(_fbb);
  builder_.add_points(points);
  builder_.add_sequence_id(sequence_id);
  builder_.add_uid(uid);
  return builder_.Finish();
}

inline flatbuffers::Offset<DrawPointsPayload> CreateDrawPointsPayloadDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uid = 0,
    uint32_t sequence_id = 0,
    const std::vector<Vec2> *points = nullptr) {
  auto points__ = points ? _fbb.CreateVectorOfStructs<Vec2>(*points) : 0;
  return CreateDrawPointsPayload(
      _fbb,
      uid,
      sequence_id,
      points__);
}

struct DeleteBatchPayload FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_SEQUENCE_ID = 6
  };
  uint32_t uid() const {
    return GetField<uint32_t>(VT_UID, 0);
  }
  uint32_t sequence_id() const {
    return GetField<uint32_t>(VT_SEQUENCE_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_UID) &&
           VerifyField<uint32_t>(verifier, VT_SEQUENCE_ID) &&
           verifier.EndTable();
  }
};

struct DeleteBatchPayloadBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint32_t uid) {
    fbb_.AddElement<uint32_t>(DeleteBatchPayload::VT_UID, uid, 0);
  }
  void add_sequence_id(uint32_t sequence_id) {
    fbb_.AddElement<uint32_t>(DeleteBatchPayload::VT_SEQUENCE_ID, sequence_id, 0);
  }
  explicit DeleteBatchPayloadBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DeleteBatchPayloadBuilder &operator=(const DeleteBatchPayloadBuilder &);
  flatbuffers::Offset<DeleteBatchPayload> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DeleteBatchPayload>(end);
    return o;
  }
};

inline flatbuffers::Offset<DeleteBatchPayload> CreateDeleteBatchPayload(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uid = 0,
    uint32_t sequence_id = 0) {
  DeleteBatchPayloadBuilder builder_(_fbb);
  builder_.add_sequence_id(sequence_id);
  builder_.add_uid(uid);
  return builder_.Finish();
}

struct UserEnterPayload FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_COLOR = 6
  };
  uint32_t uid() const {
    return GetField<uint32_t>(VT_UID, 0);
  }
  uint32_t color() const {
    return GetField<uint32_t>(VT_COLOR, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_UID) &&
           VerifyField<uint32_t>(verifier, VT_COLOR) &&
           verifier.EndTable();
  }
};

struct UserEnterPayloadBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint32_t uid) {
    fbb_.AddElement<uint32_t>(UserEnterPayload::VT_UID, uid, 0);
  }
  void add_color(uint32_t color) {
    fbb_.AddElement<uint32_t>(UserEnterPayload::VT_COLOR, color, 0);
  }
  explicit UserEnterPayloadBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  UserEnterPayloadBuilder &operator=(const UserEnterPayloadBuilder &);
  flatbuffers::Offset<UserEnterPayload> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UserEnterPayload>(end);
    return o;
  }
};

inline flatbuffers::Offset<UserEnterPayload> CreateUserEnterPayload(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uid = 0,
    uint32_t color = 0) {
  UserEnterPayloadBuilder builder_(_fbb);
  builder_.add_color(color);
  builder_.add_uid(uid);
  return builder_.Finish();
}

struct UserLeavePayload FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4
  };
  uint32_t uid() const {
    return GetField<uint32_t>(VT_UID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_UID) &&
           verifier.EndTable();
  }
};

struct UserLeavePayloadBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint32_t uid) {
    fbb_.AddElement<uint32_t>(UserLeavePayload::VT_UID, uid, 0);
  }
  explicit UserLeavePayloadBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  UserLeavePayloadBuilder &operator=(const UserLeavePayloadBuilder &);
  flatbuffers::Offset<UserLeavePayload> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UserLeavePayload>(end);
    return o;
  }
};

inline flatbuffers::Offset<UserLeavePayload> CreateUserLeavePayload(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uid = 0) {
  UserLeavePayloadBuilder builder_(_fbb);
  builder_.add_uid(uid);
  return builder_.Finish();
}

inline bool VerifyPayload(flatbuffers::Verifier &verifier, const void *obj, Payload type) {
  switch (type) {
    case Payload_NONE: {
      return true;
    }
    case Payload_ServerHelloPayload: {
      auto ptr = reinterpret_cast<const ServerHelloPayload *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_FullImagePayload: {
      auto ptr = reinterpret_cast<const FullImagePayload *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_StartDrawPayload: {
      auto ptr = reinterpret_cast<const StartDrawPayload *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_EndDrawPayload: {
      auto ptr = reinterpret_cast<const EndDrawPayload *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_DrawPointsPayload: {
      auto ptr = reinterpret_cast<const DrawPointsPayload *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_DeleteBatchPayload: {
      auto ptr = reinterpret_cast<const DeleteBatchPayload *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_UserEnterPayload: {
      auto ptr = reinterpret_cast<const UserEnterPayload *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_UserLeavePayload: {
      auto ptr = reinterpret_cast<const UserLeavePayload *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyPayloadVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyPayload(
        verifier,  values->Get(i), types->GetEnum<Payload>(i))) {
      return false;
    }
  }
  return true;
}

inline const PacketPayload *GetPacketPayload(const void *buf) {
  return flatbuffers::GetRoot<PacketPayload>(buf);
}

inline const PacketPayload *GetSizePrefixedPacketPayload(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<PacketPayload>(buf);
}

inline bool VerifyPacketPayloadBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PacketPayload>(nullptr);
}

inline bool VerifySizePrefixedPacketPayloadBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PacketPayload>(nullptr);
}

inline void FinishPacketPayloadBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<PacketPayload> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPacketPayloadBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<PacketPayload> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_PROTOCOL_H_
